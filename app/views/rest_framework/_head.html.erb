<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<%= csrf_meta_tags %>
<%= csp_meta_tag rescue nil %>

<!-- ActiveStorage -->
<script src="https://cdn.jsdelivr.net/npm/activestorage@5.2.8-1/app/assets/javascripts/activestorage.min.js"></script>

<!-- Bootstrap -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-aFq/bzH65dt+w6FI2ooMVUpc+21e0SRygnTpmBvdBgSdnuTN7QbdgL+OapgHtvPp" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/js/bootstrap.bundle.min.js" integrity="sha384-qKXV1j0HvMUeCBQ+QVp7JcfGl760yU08IQ+GpUo5hlbpg51QRiuqHAJz8+BrxE/N" crossorigin="anonymous"></script>

<!-- Highlight.js -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/a11y-dark.min.css" integrity="sha512-Vj6gPCk8EZlqnoveEyuGyYaWZ1+jyjMPg8g4shwyyNlRQl6d3L9At02ZHQr5K6s5duZl/+YKMnM3/8pDhoUphg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js" integrity="sha512-bgHRAiTjGrzHzLyKOnpFvaEpGzJet3z4tZnXGjpsCcqOnAH6VGUx9frc5bcIhKTVLEiCO6vEhNAgx5jtLUYrfA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/json.min.js" integrity="sha512-0xYvyncS9OLE7GOpNBZFnwyh9+bq4HVgk4yVVYI678xRvE22ASicF1v6fZ1UiST+M6pn17MzFZdvVCI3jTHSyw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/xml.min.js" integrity="sha512-5zBcw+OKRkaNyvUEPlTSfYylVzgpi7KpncY36b0gRudfxIYIH0q0kl2j26uCUB3YBRM6ytQQEZSgRg+ZlBTmdA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<!-- NeatJSON -->
<script src="https://cdn.jsdelivr.net/npm/neatjson@0.10.5/javascript/neatjson.min.js"></script>

<!-- Trix -->
<link rel="stylesheet" type="text/css" href="https://unpkg.com/trix@2.0.0/dist/trix.css">
<script type="text/javascript" src="https://unpkg.com/trix@2.0.0/dist/trix.umd.min.js"></script>

<!-- Custom Style -->
<style>
/* Adjust headers to always take up their entire row, and tweak the sizing. */
h1,h2,h3,h4,h5,h6 { display: inline-block; font-weight: normal; margin-bottom: 0; }
h1 { font-size: 2rem; }
h2 { font-size: 1.7rem; }
h3 { font-size: 1.5rem; }
h4 { font-size: 1.3rem; }
h5 { font-size: 1.1rem; }
h6 { font-size: 1rem; }

/* Make code and code blocks a little nicer looking. */
pre code {
  display: block;
  overflow-x: auto;
}
code {
  padding: .5em !important;
  background-color: #2b2b2b !important;
  border: 1px solid #aaa;
  border-radius: 3px;
}

/* Reduce label font size. */
label.form-label {
  font-size: .8em;
}

trix-editor:empty:not(:focus)::before {
  pointer-events: none;
}

/* Make Trix buttons visible in the dark mode. */
trix-toolbar .trix-button-group {
  background-color: #f8f8f8;
}

/* Make route group expansion obvious to the user. */
.rrf-routes .rrf-route-group-header:hover {
  background-color: #333;
}
.rrf-routes .rrf-route-group-header td {
  cursor: pointer;
}

/* Disable bootstrap's collapsing animation because in tables it causes delayed jerkiness. */
.rrf-routes .collapsing {
  -webkit-transition: none;
  transition: none;
  display: none;
}

/* Copy-to-clipboard styles. */
.rrf-copy {
  position: relative;
}
.rrf-copy .rrf-copy-link {
  position: absolute;
  top: .5em;
  right: .5em;
  transition: 0.3s ease;
}
.rrf-copy .rrf-copy-link.rrf-clicked{
  color: green;
}
</style>

<!-- Custom JavaScript -->
<script>
// What to do when document loads.
document.addEventListener("DOMContentLoaded", (event) => {
  // Pretty-print JSON.
  [...document.getElementsByClassName("language-json")].forEach((el, index) => {
    el.innerHTML = neatJSON(JSON.parse(el.innerText), {
      wrap: 80,
      afterComma: 1,
      afterColon: 1,
    }).replaceAll("&", "&amp;")
      .replaceAll("<", "&lt;")
      .replaceAll(">", "&gt;")
      .replaceAll('"', "&quot;")
      .replaceAll("'", "&#039;")
  })

  // Then highlight it.
  hljs.configure({cssSelector: "pre code.auto-hljs"})
  hljs.highlightAll()

  // Replace text node links with anchor tag links.
  ;[...document.querySelectorAll(".rrf-copy code")].forEach((el, index) => {
    el.innerHTML = rrfLinkify(el.innerHTML)
  })

  // Insert copy link and callback to copy contents of `<code>` element.
  ;[...document.querySelectorAll("rrf-copy")].forEach((el, index) => {
    el.insertAdjacentHTML(
      "afterbegin",
      "<a class=\"rrf-copy-link\" onclick=\"return rrfCopyToClipboard(this)\" href=\"#\">Copy to Clipboard</a>",
    )
  })
})

// Convert plain-text links to anchor tag links.
function rrfLinkify(text) {
  return text.replace(/(https?:\/\/[^\s<>"]+)/g, "<a href=\"$1\" target=\"_blank\">$1</a>")
}

// Replace the document when doing form submission (mainly to support PUT/PATCH/DELETE).
function rrfReplaceDocument(content) {
  // Replace the document with provided content.
  document.open()
  document.write(content)
  document.close()

  // Trigger `DOMContentLoaded` manually so our custom JavaScript works.
  document.dispatchEvent(new Event("DOMContentLoaded", {bubbles: true, cancelable: true}))
}

// Copy the element's next `<code>` sibling's content to the clipboard.
function rrfCopyToClipboard(element) {
  let range = document.createRange()
  range.selectNode(element.nextSibling)
  window.getSelection().removeAllRanges()
  window.getSelection().addRange(range)
  if (document.execCommand("copy")) {
    // Trigger clicked animation.
    element.classList.add("rrf-clicked")
    element.innerText = "Copied!"
    setTimeout(() => {
      element.classList.remove("rrf-clicked")
      element.innerText = "Copy to Clipboard"
    }, 700)
  }

  // Return false to prevent normal link behavior.
  return false
}

// Refresh the window as a `GET` request.
function rrfGet(button) {
  button.disabled = true
  window.location.replace(window.location.href)
}

// Call `DELETE` on the current path.
function rrfDelete(button) {
  button.disabled = true
  rrfAPICall(window.location.pathname, "DELETE")
}

// Call `OPTIONS` on the current path.
function rrfOptions(button) {
  button.disabled = true
  rrfAPICall(window.location.pathname, "OPTIONS")
}

// Submit the raw form.
function rrfSubmitRawForm(button) {
  button.disabled = true

  // Grab the selected route/method, media type, and the body.
  const [method, path] = document.getElementById("rawFormRoute").value.split(":")
  const media_type = document.getElementById("rawFormMediaType").value
  const body = document.getElementById("rawFormContent").value

  // Perform the API call.
  rrfAPICall(path, method, {body, headers: {"Content-Type": media_type}})
}

// Make an HTML API call and replace the document with the response.
function rrfAPICall(path, method, kwargs={}) {
  const headers = kwargs.headers || {}
  delete kwargs.headers

  fetch(path, {method, headers: {"Accept": "text/html", ...headers}, ...kwargs})
    .then((response) => response.text())
    .then((body) => { rrfReplaceDocument(body) })
}
</script>
